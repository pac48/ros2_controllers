admittance_controller:
  joints: {
    type: string_array,
    description: "specifies which joints will be used by the controller",
    read_only: true
  }

  command_interfaces:
    {
      type: string_array,
      description: "specifies which command interfaces to claim",
      read_only: true
    }

  state_interfaces:
    {
      type: string_array,
      description: "specifies which state interfaces to claim",
      read_only: true
    }

  chainable_command_interfaces:
    {
      type: string_array,
      description: "specifies which chainable interfaces to claim",
      read_only: true
    }

  kinematics:
    plugin_name: {
      type: string,
      description: "specifies which kinematics plugin to load"
    }
    plugin_package: {
      type: string,
      description: "specifies the package to load the kinematics plugin from"
    }
    base: {
      type: string,
      description: "specifies the base link of the robot description used by the kinematics plugin"
    }
    tip: {
      type: string,
      description: "specifies the end effector link of the robot description used by the kinematics plugin"
    }
    alpha: {
      type: double,
      default_value: 0.01,
      description: "specifies the damping coefficient for the Jacobian pseudo inverse"
    }

  ft_sensor:
    name: {
      type: string,
      description: "name of the force torque sensor in the robot description"
    }
    frame:
      id: {
        type: string,
        description: "frame of the force torque sensor"
      }
    filter_coefficient: {
      type: double,
      default_value: 0.05,
      description: "specifies the coefficient for the sensor's exponential filter"
    }

  control:
    frame:
      id: {
        type: string,
        description: "control frame used for admittance control"
      }

  fixed_world_frame: # Gravity points down (neg. Z) in this frame (Usually: world or base_link)
    frame:
      id: {
        type: string,
        description: "world frame, gravity points down (neg. Z) in this frame"
      }

  gravity_compensation:
    frame:
      id: {
        type: string,
        description: "frame which center of gravity (CoG) is defined in"
      }
    CoG: # specifies the center of gravity of the end effector
      pos: {
        type: double_array,
        description: "position of the center of gravity (CoG) in its frame",
        validation: {
          fixed_size<>: 3
        }
      }
      force: {
        type: double,
        default_value: 0.0,
        description: "weight of the end effector, e.g mass * 9.81"
      }

  admittance:
    selected_axes:
      {
        type: bool_array,
        description: "specifies if the axes x, y, z, rx, ry, and rz are enabled",
        validation: {
          fixed_size<>: 6
        }
      }
    mass: {
      type: double_array,
      description: "specifies mass values for x, y, z, rx, ry, and rz used in the admittance calculation",
      validation: {
        fixed_size<>: 6,
        element_bounds<>: [ 0.0001, 1000000.0 ]
      }
    }
    damping_ratio: {
      type: double_array,
      description: "specifies damping ratio values for x, y, z, rx, ry, and rz used in the admittance calculation.
      The values are calculated as damping can be used instead: zeta = D / (2 * sqrt( M * S ))",
      validation: {
        fixed_size<>: 6
      }
    }
    stiffness: {
      type: double_array,
      description: "specifies stiffness values for x, y, z, rx, ry, and rz used in the admittance calculation",
      validation: {
        fixed_size<>: 6,
        element_bounds<>: [ 0.0, 100000000.0 ]
      }
    }
    joint_damping: {
      type: double,
      description: "specifies joint damping applied when the cartesian velocity norm is less than min_velocity",
      default_value: 5,
      validation: {
        lower_bounds: [ 0.0 ]
      }
    }

  # general settings
  robot_description: {
    type: string,
    description: "Contains robot description in URDF format. The description is used to perform forward and inverse kinematics.",
    read_only: true
  }
  enable_parameter_update_without_reactivation: {
    type: bool,
    default_value: true,
    description: "if enabled, parameters will be dynamically updated in the control loop"
  }
